// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from storage.djinni

#import "MSACredentialType.h"
#import <Foundation/Foundation.h>
@class MSAAccount;
@class MSACredential;
@class MSAOperationStatus;
@class MSAReadAccountResponse;
@class MSAReadAccountsResponse;
@class MSAReadCredentialsResponse;


/** This interface will be implemented in Java and ObjC and can be called from C++. */
@protocol MSAStorageManager

/**
 * Gets all credentials which match the parameters. May return a partial list of credentials if failed to read all of them,
 * in which case the status_type may not be "success".
 * correlationId: optional
 * homeAccountId: required
 * environment: required
 * realm: optional. Empty string means "match all".
 * clientId: required
 * target: optional. Empty string means "match all".
 * type: required. It's a collection of types. The API should return all types which are present in the set.
 */
- (nullable MSAReadCredentialsResponse *)readCredentials:(nonnull NSString *)correlationId
                                           homeAccountId:(nonnull NSString *)homeAccountId
                                             environment:(nonnull NSString *)environment
                                                   realm:(nonnull NSString *)realm
                                                clientId:(nonnull NSString *)clientId
                                                  target:(nonnull NSString *)target
                                                   types:(nonnull NSSet<NSNumber *> *)types;

/**
 * Writes all credentials in the list to the storage.
 * correlationId: optional
 * credentials: the list of credentials to write. They don't have to fall under the same environment, account, or user.
 */
- (nullable MSAOperationStatus *)writeCredentials:(nonnull NSString *)correlationId
                                      credentials:(nonnull NSArray<MSACredential *> *)credentials;

/** Deletes all matching credentials. Parameters mirror read_credentials. */
- (nullable MSAOperationStatus *)deleteCredentials:(nonnull NSString *)correlationId
                                     homeAccountId:(nonnull NSString *)homeAccountId
                                       environment:(nonnull NSString *)environment
                                             realm:(nonnull NSString *)realm
                                          clientId:(nonnull NSString *)clientId
                                            target:(nonnull NSString *)target
                                             types:(nonnull NSSet<NSNumber *> *)types;

/**
 * Reads all accounts present in the cache. May return a partial list of accounts if failed to read all of them,
 * in which case the status_type may not be "success".
 * correlationId: optional
 */
- (nullable MSAReadAccountsResponse *)readAllAccounts:(nonnull NSString *)correlationId;

/**
 * Reads an account object, if present. If account is not present in the cache, returns "success" with "account" being null.
 * correlationId: optional
 * homeAccountId: required
 * environment: required
 * realm: required
 */
- (nullable MSAReadAccountResponse *)readAccount:(nonnull NSString *)correlationId
                                   homeAccountId:(nonnull NSString *)homeAccountId
                                     environment:(nonnull NSString *)environment
                                           realm:(nonnull NSString *)realm;

/**
 * Write an account object into cache. Return status_type other than "success" means that the account wasn't written.
 * correlationId: optional
 * account: required
 */
- (nullable MSAOperationStatus *)writeAccount:(nonnull NSString *)correlationId
                                      account:(nullable MSAAccount *)account;

/**
 * Deletes an account and all associated credentials.
 * Specifically, it removes all associated access tokens and id tokens.
 * It does not remove any refresh tokens or family refresh tokens, because those are associated with multiple accounts.
 * correlationId: optional
 * homeAccountId: required
 * environment: required
 * realm: required
 */
- (nullable MSAOperationStatus *)deleteAccount:(nonnull NSString *)correlationId
                                 homeAccountId:(nonnull NSString *)homeAccountId
                                   environment:(nonnull NSString *)environment
                                         realm:(nonnull NSString *)realm;

/**
 * Deletes all information associated with a given homeAccountId and environment.
 * This includes all accounts, access tokens, id tokens, refresh tokens, and family refresh tokens.
 * correlationId: optional
 * homeAccountId: required
 * environment: optional. Empty string means "match all".
 */
- (nullable MSAOperationStatus *)deleteAccounts:(nonnull NSString *)correlationId
                                  homeAccountId:(nonnull NSString *)homeAccountId
                                    environment:(nonnull NSString *)environment;

@end
