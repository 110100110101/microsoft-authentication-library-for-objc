variables:
  - name: 'releaseVersion'
    value: '1.1.23'
  - name: 'repositoryName' # Name of the repository
    value: 'AzureAD/microsoft-authentication-library-for-objc'
  - name: 'repositoryBranch' # Name of the branch where version number will be updated for files that contain version number.
    value: 'master'
  - name: 'GithubServiceConnection' # Service connection name used to connect Github repository
    value: 'MSAL ObjC Service Connection'
  - name: 'docsRepositoryBranch' # Name of the branch where public reference docs will be pushed for github page
    value: 'gh-pages'

pr: none

resources:
  repositories:
  - repository: msalRepository
    type: github
    endpoint: 'GitHub for AzureAD and Azure-Samples (as aadidgit service)'
    name: $(repositoryName)
    ref: $(repositoryBranch)

jobs:
- job: TryIssueCreation
  displayName: Github Issue Creation Test
  pool:
    vmImage: 'macOS-latest'
    timeOutInMinutes: 20

  steps:
  - checkout: msalRepository
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: false
  
  - task: InstallSSHKey@0
    displayName: Install SSH Key for MSAL Github Repo
    inputs:
      knownHostsEntry: '$(sshKnownHosts)'
      sshPublicKey: '$(sshPublicKey)'
      sshKeySecureFile: 'msal_objc_private_key'
      addEntryToConfig: true
      configHostAlias: 'ADO Release Pipeline Public Key'
      configHostname: 'github.com'
  - task: UsePythonVersion@0
    displayName: Use Python 3.x
  - bash: python3 -m pip install github3.py==2.0.0
    displayName: Install the github3.py REST API client for Python
  - task: PythonScript@0
    displayName: Create Issue if Pipeline fails
    inputs:
      scriptSource: inline
      script: |
        import github3
        import requests
        import textwrap
        from pprint import pprint
        from subprocess import run, PIPE
        auth_header = ""
        try:
            auth_header = run(["git", "config", "http.$(Build.Repository.URI).extraheader"], text=True, check=True, stdout=PIPE).stdout.strip()
        except Exception as e:
          pprint(e)
        class HTTPHardcodedHeaderAuth(requests.auth.AuthBase):
            def __call__(self, r):
                r.headers['Authorization'] = auth_header.replace("AUTHORIZATION: ", "")
                return r

        github = github3.GitHub()
        github.session.auth = HTTPHardcodedHeaderAuth()
        pprint(github.me().email)
        github_org, repo = "$(Build.Repository.Name)".split("/")
        github.create_issue(github_org, repo, "Title for the Issue", "Body of the issue", assignee=github.me().email, labels=['automation failure'])