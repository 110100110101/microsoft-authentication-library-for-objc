trigger:
  branches:
    include:
    - ameyapat/spm-framework-build
  paths:
    include:
    - azure_pipelines/spm-framework.yml
    exclude:
    - azure_pipelines
    - Package.swift

variables:
  - name: 'releaseVersion'
    value: null
  - name: 'frameworkChecksum'
    value: null

resources:
  repositories:
  - repository: msalRepository
    type: github
    endpoint: 'github.com_ameyapat'
    name: ameyapat/microsoft-authentication-library-for-objc
    ref: master

jobs:
- job: BuildXcFrameworks
  pool:
    vmImage: 'macOS-latest'
    timeOutInMinutes: 20

  steps:
  - checkout: msalRepository
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true

  - task: Xcode@5
    displayName: Build archive for iOS Simulator
    inputs:
      actions: 'archive'
      sdk: 'iphonesimulator'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS-Sim'
      exportPath: $(Build.binariesDirectory)/iOS-Sim

  - task: Xcode@5
    displayName: Build archive for iOS device
    inputs:
      actions: 'archive'
      sdk: 'iphoneos'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      destinationTypeOption: 'devices'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS'
      exportPath: $(Build.binariesDirectory)/iOS

  - task: Xcode@5
    displayName: Build archive for macOS
    inputs:
      actions: 'archive'
      sdk: 'macosx'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (Mac Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/macOS'
      exportPath: $(Build.binariesDirectory)/macOS

  - task: Bash@3
    displayName: Build xcframework from archives
    inputs:
      workingDirectory: $(Build.binariesDirectory)
      targetType: 'inline'
      script: |
        # Building xcframework
        cd $(Build.BinariesDirectory)
        
        echo "Build Dir = $(pwd)"

        xcodebuild -create-xcframework \
        -framework $(Build.binariesDirectory)/iOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/iOS-Sim.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/macOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -output $(Build.BinariesDirectory)/MSAL.xcframework
      failOnStderr: true
  
  - task: ArchiveFiles@2
    displayName: Zip xcframework
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/MSAL.xcframework'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/MSAL.zip'
      replaceExistingArchive: true

#  - task: EsrpCodeSigning@1
#    inputs:
#      ConnectedServiceName: 'MSAL ESRP CodeSign Service Connection'
#      FolderPath: '$(Build.ArtifactStagingDirectory)'
#      Pattern: 'MSAL.zip'
#      signConfigType: 'inlineSignParams'
#      SessionTimeout: '60'
#      MaxConcurrency: '50'
#      MaxRetryAttempts: '5'
#      UseMinimatch: false
#      inlineOperation: |
#        [
#          {
#            "keyCode": "CP-233039-Apple",
#            "operationCode": "iOSSdkSign",
#            "parameters": {},
#            "toolName": "sign",
#            "toolVersion": "1.0"
#          }
#        ]

  #GET latest release version tag TODO: Replace ameyapat/microsoft-authentication-lib with $(Build.Repository.Name)
  - task: Bash@3
    displayName: Calculate checksum & extract release version from changelog
    inputs:
      targetType: 'inline'
      script: |
        chksm=$(shasum -a 256 $(Build.ArtifactStagingDirectory)/MSAL.zip | cut -d ' ' -f 1)
        echo "##vso[task.setvariable variable=frameworkChecksum]${chksm}"
        
        ver=echo $(egrep -om1 '\[([0-9a-zA-Z\.\-]+)\]' CHANGELOG.md | sed -E -e "s/\[|\]//g")
        echo "##vso[task.setvariable variable=releaseVersion]${ver}"
      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: true
      noProfile: false
      noRc: false

  - task: Shellpp@0
    displayName: Generating release archive zips
    inputs:
      type: 'FilePath'
      scriptPath: 'ReleaseArchive.sh'
      args: '$(releaseVersion) $(Build.ArtifactStagingDirectory)'

  - task: GitHubRelease@1
    displayName: Create Release
    inputs:
      gitHubConnection: 'github.com_ameyapat'
      repositoryName: 'ameyapat/microsoft-authentication-library-for-objc'
      action: 'create'
      target: 'master'
      tagSource: 'userSpecifiedTag'
      tag: '$(releaseVersion)'
      title: '$(releaseVersion)'
      assets: |
        $(Build.ArtifactStagingDirectory)/*.zip
        $(Build.ArtifactStagingDirectory)/*.tar.gz
      isDraft: true
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'


  - task: Shellpp@0
    displayName: Push Package.swift to master
    inputs:
      type: 'InlineScript'
      cwd: '$(Build.SourcesDirectory)'
      failOnStandardError: true
      script: |
        perl -i -pe's/checksum:\s+\"[\da-fA-F]{64}\"/checksum: \"$(frameworkChecksum)\"/' Package.swift
        perl -i -pe's/releases\/download\/[0-9a-zA-Z\.].+\//releases\/downlaod\/$(releaseVersion)\//' Package.swift

        git add Package.swift
        git status
        git commit -m "Testing commiting from pipeline [skip ci]"
        git push origin HEAD:master