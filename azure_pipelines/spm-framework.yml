variables:
  - name: 'releaseVersion'
    value: null
  - name: 'commonCoreReleaseVersion'
    value: null
  - name: 'frameworkChecksum'
    value: null
  - name: 'repositoryName' # Name of the repository
    value: 'AzureAD/microsoft-authentication-library-for-objc'
  - name: 'repositoryBranch' # Name of the branch where version number will be updated for files that contain version number.
    value: 'main'
  - name: 'GithubServiceConnection' # Service connection name used to connect Github repository
    value: 'MSAL ObjC Service Connection'
  - name: 'docsRepositoryBranch' # Name of the branch where public reference docs will be pushed for github page
    value: 'gh-pages'

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - CHANGELOG.md

pr: none

resources:
  repositories:
  - repository: msalRepository
    type: github
    endpoint: 'GitHub for AzureAD and Azure-Samples (as aadidgit service)'
    name: $(repositoryName)
    ref: $(repositoryBranch)

jobs:
- job: BuildXcFrameworks
  displayName: Build MSAL framework and release
  pool:
    vmImage: 'macOS-13'
    timeOutInMinutes: 20

  steps:
  - checkout: msalRepository
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: false
  - task: Bash@3
    displayName: Install Sourcekitten
    inputs:
      targetType: 'inline'
      script: |
        brew install sourcekitten
  - task: InstallSSHKey@0
    displayName: Install SSH Key for MSAL Github Repo
    inputs:
      knownHostsEntry: '$(sshKnownHosts)'
      sshPublicKey: '$(sshPublicKey)'
      sshKeySecureFile: 'msal_objc_private_key'
      addEntryToConfig: true
      configHostAlias: 'ADO Release Pipeline Public Key'
      configHostname: 'github.com'
  - task: Bash@3
    displayName: Build MSAL docs via Jazzy
    inputs:
      targetType: 'inline'
      script: 'sh build_docs.sh'
  - task: Bash@3
    displayName: Push docs to github page for repository
    inputs:
      targetType: 'inline'
      script: |
        # NOTE : This should be the last step since it changes branch from main to $(docsRepositoryBranch)
        if [ ! -d "docs.temp" ]; then
            echo "Docs were not generated in previous step!"
        else
            authorName=$(git log -1 --pretty=format:'%an')
            authorEmail=$(git log -1 --pretty=format:'%ae')
            git config --global user.email "${authorEmail}"
            git config --global user.name "${authorName}"

            author=$(git log -1 --pretty=format:'%an <%ae>')
            ls
            # Create a temp branch to cherry pick doc changes
            git checkout -b 'update-docs-for-release-130'
            git add docs.temp/docs/*
            git commit -m 'adding docs for release' --author="${author}" --status

            # Cleanup
            rm -rf docs.temp
            git fetch origin $(docsRepositoryBranch)
            git checkout FETCH_HEAD
            git checkout $(docsRepositoryBranch)
            git clean -fd

            # Get previously commited changes for docs
            git cherry-pick --strategy-option theirs "update-docs-for-release-130"

            # Copy files in docs.temp folder to root
            \cp -r docs.temp/docs/* .

            # Push changes to docsRepositoryBranch branch
            git add -A
            git commit -m 'Update docs for release 1.3.0' --status  --author="${author}"
            git push origin $(docsRepositoryBranch)
        fi
      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: false
      noProfile: false
      noRc: false
