variables:
  - name: 'releaseVersion'
    value: null
  - name: 'frameworkChecksum'
    value: null
  - name: 'repositoryName'
    value: 'AzureAD/microsoft-authentication-library-for-objc'
  - name: 'repositoryBranch'
    value: 'ameyapat/spm-framework-build'
  - name: 'GithubServiceConnection'
    value: 'MSAL ObjC Service Connection'

trigger:
  branches:
    include:
    - 'ameyapat/spm-framework-build'
# TODO : remove paths after testing is done/ maybe add CHANGELOG.md so that release is only done when changelog changes on master
  paths:
    include:
    - azure_pipelines/spm-framework.yml
    exclude:
    - azure_pipelines
    - Package.swift

resources:
  repositories:
  - repository: msalRepository
    type: github
    endpoint: 'GitHub for AzureAD and Azure-Samples (as aadidgit service)'
    name: $(repositoryName)
    ref: $(repositoryBranch)

jobs:
- job: BuildXcFrameworks
  pool:
    vmImage: 'macOS-latest'
    timeOutInMinutes: 20

  steps:
  - checkout: msalRepository
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true
  - task: Xcode@5
    displayName: Build archive for iOS Simulator
    inputs:
      actions: 'archive'
      sdk: 'iphonesimulator'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS-Sim'
      exportPath: $(Build.binariesDirectory)/iOS-Sim
  - task: Xcode@5
    displayName: Build archive for iOS device
    inputs:
      actions: 'archive'
      sdk: 'iphoneos'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      destinationTypeOption: 'devices'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS'
      exportPath: $(Build.binariesDirectory)/iOS
  - task: Xcode@5
    displayName: Build archive for macOS
    inputs:
      actions: 'archive'
      sdk: 'macosx'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (Mac Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/macOS'
      exportPath: $(Build.binariesDirectory)/macOS
  - task: Bash@3
    displayName: Build xcframework from archives
    inputs:
      workingDirectory: $(Build.binariesDirectory)
      targetType: 'inline'
      script: |
        # Building xcframework
        cd $(Build.BinariesDirectory)
        
        echo "Build Dir = $(pwd)"

        xcodebuild -create-xcframework \
        -framework $(Build.binariesDirectory)/iOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/iOS-Sim.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/macOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -output $(Build.binariesDirectory)/MSAL.xcframework
      failOnStderr: true
  - task: ArchiveFiles@2
    displayName: Zip xcframework
    inputs:
      rootFolderOrFile: '$(Build.binariesDirectory)/MSAL.xcframework'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/MSAL.zip'
      replaceExistingArchive: true
  - task: EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: 'MSAL ESRP CodeSign Service Connection'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      Pattern: 'MSAL.zip'
      signConfigType: 'inlineSignParams'
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
      UseMinimatch: false
      inlineOperation: |
        [
          {
            "keyCode": "CP-233039-Apple",
            "operationCode": "iOSSdkSign",
            "parameters": {},
           "toolName": "sign",
            "toolVersion": "1.0"
          }
        ]
  - task: Bash@3
    displayName: Zip and unzip
    inputs:
      targetType: 'inline'
      script: |
        unzip MSAL.zip -d MSAL.xcframework
        rm MSAL.zip
        zip -r MSAL.zip MSAL.xcframework
      workingDirectory: '$(Build.ArtifactStagingDirectory)'
      failOnStderr: true
  - task: Bash@3
    displayName: Calculate checksum | extract release version from changelog | Build release notes
    inputs:
      targetType: 'inline'
      script: |
        chksm=$(shasum -a 256 $(Build.ArtifactStagingDirectory)/MSAL.zip | cut -d ' ' -f 1)
        echo "##vso[task.setvariable variable=frameworkChecksum]${chksm}"
       
        ver=$(egrep -om1 '\[([0-9a-zA-Z\.\-]+)\]' CHANGELOG.md | sed -E -e "s/\[|\]//g")
        echo "##vso[task.setvariable variable=releaseVersion]${ver}"

        chlg="## Release Notes"$'\n'
        if [ ! -e CHANGELOG.md ]; then
          echo "CHANGELOG NOT FOUND!"
        else
          fl=0
        while read p; do
            if [[ $p =~ ^\#\#.*$ ]]; then
                fl=$((fl + 1))
                if [ $fl -gt 1 ]
                then
                    break
                fi
            fi

            if [[ ($fl -eq 1)  && !($p =~ ^\#\#) ]]; then
                chlg="$chlg"$'\n'"$p"
            fi
        done <CHANGELOG.md
        fi
        echo "chlg = ${chlg}"
        echo "${chlg}" > release-notes.md

      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: true
      noProfile: false
      noRc: false
  - task: Shellpp@0
    displayName: Generating release archive zips
    inputs:
      type: 'FilePath'
      scriptPath: 'ReleaseArchive.sh'
      args: '$(releaseVersion) $(Build.ArtifactStagingDirectory)'
  - task: GitHubRelease@1
    inputs:
      gitHubConnection: '$(GithubServiceConnection)'
      repositoryName: '$(repositoryName)'
      action: 'create'
      target: '$(repositoryBranch)'
      tagSource: 'userSpecifiedTag'
      tag: '$(releaseVersion)'
      title: '$(releaseVersion)'
      releaseNotesFilePath: 'release-notes.md'
      assets: |
        $(Build.ArtifactStagingDirectory)/*.zip
        $(Build.ArtifactStagingDirectory)/*.tar.gz
      isDraft: true
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'issueBased'
  - task: Bash@3
    displayName: Update package.swift with url & checksum & git push 
    inputs:
      targetType: 'inline'
      script: |
        rm -rf release-notes.md
        git fetch origin $(repositoryBranch) -q
        git checkout FETCH_HEAD -q
        git checkout -b update-package-for-$(releaseVersion) -q
        if [ ! -e Package.swift ]; then
            cat > Package.swift << EOF
            import PackageDescription

            let package = Package(
            name: "MSAL",
            platforms: [
                .macOS(.v10_12),.iOS(.v11)
            ],
            products: [
                .library(
                    name: "MSAL",
                    targets: ["MSAL"]),
            ],
            targets: [
                .binaryTarget(name: "MSAL", url: "https://github.com/$(repositoryName)/releases/download/releaseTag1.2.3/MSAL.zip", checksum: "abcdefabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234")
            ]
            )
        EOF
        fi
        perl -i -pe's/checksum:\s+\"[\da-fA-F]{64}\"/checksum: \"$(frameworkChecksum)\"/' Package.swift
        perl -i -pe's/releases\/download\/[0-9a-zA-Z\.].+\//releases\/download\/$(releaseVersion)\//' Package.swift
        #perl -i -pe's/s\.version\s+=\s+".*"/s.version      = \"$(releaseVersion)\"/' MSAL.podspec

        git add Package.swift
        git commit -a -m "Updating MSAL framework checksum & url for $(releaseVersion) [skip ci]" -q
        git checkout $(repositoryBranch) -q
        git merge update-package-for-$(releaseVersion) -q
        git push origin $(repositoryBranch) -q
        git branch -d update-package-for-$(releaseVersion) -q
      workingDirectory: '$(Build.SourcesDirectory)'
      failOnStderr: true
      noProfile: false
      noRc: false

  - task: Bash@3
    displayName: Push pod to Cocoapods
    inputs:
      targetType: 'inline'
      script: |
        # Release to CocoaPods
        #pod trunk push --use-libraries MSAL.podspec
        pod trunk me
      workingDirectory: '$(Build.SourcesDirectory)'
    env:
      COCOAPODS_TRUNK_TOKEN: $(COCOAPODS_TRUNK_TOKEN)