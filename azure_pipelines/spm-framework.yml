# specific path build
trigger:
  branches:
    include:
    - ameyapat/spm-framework-build
  paths:
    include:
    - azure_pipelines/spm-framework.yml
    exclude:
    - azure_pipelines

variables:
  name: 'releaseVersion'
  value: null

jobs:
- job: BuildXcFrameworks
  pool:
    vmImage: 'macOS-latest'
    timeOutInMinutes: 20

  steps:
  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true

  - task: Xcode@5
    displayName: Build archive for iOS Simulator
    inputs:
      actions: 'archive'
      sdk: 'iphonesimulator'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS-Sim'
      exportPath: $(Build.binariesDirectory)/iOS-Sim

  - task: Xcode@5
    displayName: Build archive for iOS device
    inputs:
      actions: 'archive'
      sdk: 'iphoneos'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      destinationTypeOption: 'devices'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS'
      exportPath: $(Build.binariesDirectory)/iOS

  - task: Xcode@5
    displayName: Build archive for macOS
    inputs:
      actions: 'archive'
      sdk: 'macosx'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (Mac Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/macOS'
      exportPath: $(Build.binariesDirectory)/macOS

  - task: Bash@3
    displayName: Build xcframework from archives
    inputs:
      workingDirectory: $(Build.binariesDirectory)
      targetType: 'inline'
      script: |
        # Building xcframework
        cd $(Build.BinariesDirectory)
        
        echo "Build Dir = $(pwd)"

        xcodebuild -create-xcframework \
        -framework $(Build.binariesDirectory)/iOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/iOS-Sim.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/macOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -output $(Build.BinariesDirectory)/MSAL.xcframework
      failOnStderr: true
  
  - task: ArchiveFiles@2
    displayName: Zip xcframework
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/MSAL.xcframework'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/MSAL.zip'
      replaceExistingArchive: true

  - task: EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: 'MSAL ESRP CodeSign Service Connection'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      Pattern: 'MSAL.zip'
      signConfigType: 'inlineSignParams'
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'
      UseMinimatch: false
      inlineOperation: |
        [
          {
            "keyCode": "CP-231522",
            "operationCode": "SigntoolSign",
            "parameters": {
              "OpusName" : "Microsoft",
              "OpusInfo" : "http://www.microsoft.com",
              "Append" : "/as",
              "FileDigest" : "/fd \"SHA256\"",
              "PageHash" : "/NPH",
              "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
             },
            "toolName": "sign",
            "toolVersion": "1.0"
          },
          {
            "KeyCode" : "CP-231522",
             "OperationCode" : "SigntoolVerify",
             "Parameters" : {},
             "ToolName" : "sign",
             "ToolVersion" : "1.0"
          }
        ]
  
  # GET latest release version tag
  - task: Bash@3
    displayName: GET latest release tag
    inputs:
      targetType: 'inline'
      script: |
        req=$(curl -sS "https://api.github.com/repos/ameyapat/microsoft-authentication-library-for-objc/releases/latest" | jq -r '.tag_name')        
        echo "##vso[task.setvariable variable=releaseVersion]$req"
      failOnStderr: true
      noProfile: false
      noRc: false

  #TODO : Replace forked repo with actual MSAL repo
  - task: GitHubRelease@1
    displayName: Update tagged release with signed framework
    inputs:
      gitHubConnection: 'ameyapat'
      repositoryName: 'ameyapat/microsoft-authentication-library-for-objc'
      action: 'edit'
      tag: '$(releaseVersion)'
      addChangeLog: false
      
  