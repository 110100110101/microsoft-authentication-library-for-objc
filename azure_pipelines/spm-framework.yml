# specific path build
trigger:
  branches:
    include:
    - ameyapat/spm-framework-build
  paths:
    include:
    - azure_pipelines/spm-framework.yml
    exclude:
    - azure_pipelines
  
jobs:
- job: BuildXcFrameworks
  pool:
    vmImage: 'macOS-latest'
    timeOutInMinutes: 20

  steps:
  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true

  - task: Xcode@5
    displayName: Build archive for iOS Simulator
    inputs:
      actions: 'archive'
      sdk: 'iphonesimulator'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS-Sim'
      exportPath: $(Build.binariesDirectory)/iOS-Sim

  - task: Xcode@5
    displayName: Build archive for iOS device
    inputs:
      actions: 'archive'
      sdk: 'iphoneos'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      destinationTypeOption: 'devices'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS'
      exportPath: $(Build.binariesDirectory)/iOS

  - task: Xcode@5
    displayName: Build archive for macOS
    inputs:
      actions: 'archive'
      sdk: 'macosx'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (Mac Framework)'
      packageApp: false
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/macOS'
      exportPath: $(Build.binariesDirectory)/macOS

  - task: Bash@3
    displayName: Build xcframework from archives
    inputs:
      workingDirectory: $(Build.binariesDirectory)
      targetType: 'inline'
      script: |
        # Building xcframework
        cd $(Build.BinariesDirectory)
        
        echo "Build Dir = $(pwd)"
        echo "$(ls)"

        xcodebuild -create-xcframework \
        -framework $(Build.binariesDirectory)/iOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/iOS-Sim.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/macOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -output $(Build.binariesDirectory)/MSAL.xcframework
      failOnStderr: true
  
  #TODO: Codesigning to be placed here
      
  - task: ArchiveFiles@2
    displayName: Zip xcframework
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/MSAL.xcframework'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/MSAL.zip'
      replaceExistingArchive: true
  
  # Download existing assests in the latest release & determine release version
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'ameyapat'
      userRepository: 'ameyapat/microsoft-authentication-library-for-objc'
      defaultVersionType: 'latest'
      downloadPath: '$(System.ArtifactsDirectory)'
  
  - task: Bash@3
    displayName: Get Release Version
    name: GetReleaseVersionTask
    inputs:
      targetType: 'inline'
      script: |
        for file in $(System.ArtifactsDirectory)/*; do       
          f=$(echo "${file##*/}");
          filename=$(echo $f| cut  -d'.zip' -f 1);
          echo "##vso[task.setvariable variable=releaseVersion]$filename"
        done
  
  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'ameyapat'
      repositoryName: 'ameyapat/microsoft-authentication-library-for-objc'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'gitTag'
      tagPattern: 'releaseVersion'
      title: 'GetReleaseVersion.releaseVersion'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
  