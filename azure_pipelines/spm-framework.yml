# specific path build
trigger:
  branches:
    include:
    - ameyapat/spm-framework-build
  paths:
    include:
    - azure_pipelines/spm-framework.yml
    exclude:
    - azure_pipelines
  
jobs:
- job: BuildXcFrameworks
  pool:
    vmImage: 'macOS-latest'
    timeOutInMinutes: 20

  steps:
  - checkout: self
    clean: true
    fetchDepth: 1
    persistCredentials: true

  - task: Xcode@5
    inputs:
      actions: 'archive'
      sdk: 'iphonesimulator'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      destinationPlatformOption: 'iOS'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES'
      archivePath: $(Build.binariesDirectory)/iOS-Sim

  - task: Xcode@5
    inputs:
      actions: 'archive'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (iOS Framework)'
      packageApp: false
      destinationPlatformOption: 'iOS'
      destinationTypeOption: 'devices'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES'
      archivePath: $(Build.binariesDirectory)/iOS

  - task: Xcode@5
    inputs:
      actions: 'archive'
      xcWorkspacePath: 'MSAL.xcworkspace'
      scheme: 'MSAL (Mac Framework)'
      packageApp: false
      destinationPlatformOption: 'macOS'
      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES'
      archivePath: $(Build.binariesDirectory)/macOs

  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        # Building xcframework
        cd $(Build.BinariesDirectory)
        
        xcodebuild -create-xcframework \
        -framework $(Build.binariesDirectory)/iOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/iOS-Sim.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -framework $(Build.binariesDirectory)/macOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
        -output $(Build.binariesDirectory)/MSAL.xcframework
      failOnStderr: true
  