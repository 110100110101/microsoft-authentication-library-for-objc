# specific path build
trigger:
  branches:
    include:
    - ameyapat/spm-framework-build
  paths:
    include:
    - azure_pipelines/spm-framework.yml
    exclude:
    - azure_pipelines
    - Package.swift

variables:
  - name: 'releaseVersion'
    value: null
  - name: 'frameworkChecksum'
    value: null

jobs:
- job: BuildXcFrameworks
  pool:
    vmImage: 'macOS-latest'
    timeOutInMinutes: 20

  steps:
  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: true


#  - task: Xcode@5
#    displayName: Build archive for iOS Simulator
#    inputs:
#      actions: 'archive'
#      sdk: 'iphonesimulator'
#      xcWorkspacePath: 'MSAL.xcworkspace'
#      scheme: 'MSAL (iOS Framework)'
#      packageApp: false
#      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS-Sim'
#      exportPath: $(Build.binariesDirectory)/iOS-Sim

#  - task: Xcode@5
#    displayName: Build archive for iOS device
#    inputs:
#      actions: 'archive'
#      sdk: 'iphoneos'
#      xcWorkspacePath: 'MSAL.xcworkspace'
#      scheme: 'MSAL (iOS Framework)'
#      packageApp: false
#      destinationTypeOption: 'devices'
#      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/iOS'
#      exportPath: $(Build.binariesDirectory)/iOS

#  - task: Xcode@5
#    displayName: Build archive for macOS
#    inputs:
#      actions: 'archive'
#      sdk: 'macosx'
#      xcWorkspacePath: 'MSAL.xcworkspace'
#      scheme: 'MSAL (Mac Framework)'
#      packageApp: false
#      args: 'SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES -archivePath $(Build.binariesDirectory)/macOS'
#      exportPath: $(Build.binariesDirectory)/macOS

#  - task: Bash@3
#    displayName: Build xcframework from archives
#    inputs:
#      workingDirectory: $(Build.binariesDirectory)
#      targetType: 'inline'
#      script: |
#        # Building xcframework
#        cd $(Build.BinariesDirectory)
#        
#        echo "Build Dir = $(pwd)"
#
#        xcodebuild -create-xcframework \
#        -framework $(Build.binariesDirectory)/iOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
#        -framework $(Build.binariesDirectory)/iOS-Sim.xcarchive/Products/Library/Frameworks/MSAL.framework \
#        -framework $(Build.binariesDirectory)/macOS.xcarchive/Products/Library/Frameworks/MSAL.framework \
#        -output $(Build.BinariesDirectory)/MSAL.xcframework
#      failOnStderr: true
  
#  - task: ArchiveFiles@2
#    displayName: Zip xcframework
#    inputs:
#      rootFolderOrFile: '$(Build.BinariesDirectory)/MSAL.xcframework'
#      includeRootFolder: true
#      archiveType: 'zip'
#      archiveFile: '$(Build.ArtifactStagingDirectory)/MSAL.zip'
#      replaceExistingArchive: true

#  - task: EsrpCodeSigning@1
#    inputs:
#      ConnectedServiceName: 'MSAL ESRP CodeSign Service Connection'
#      FolderPath: '$(Build.ArtifactStagingDirectory)'
#      Pattern: 'MSAL.zip'
#      signConfigType: 'inlineSignParams'
#      SessionTimeout: '60'
#      MaxConcurrency: '50'
#      MaxRetryAttempts: '5'
#      UseMinimatch: false
#      inlineOperation: |
#        [
#          {
#            "keyCode": "CP-233039-Apple",
#            "operationCode": "iOSSdkSign",
#            "parameters": {},
#            "toolName": "sign",
#            "toolVersion": "1.0"
#          }
#        ]

  #GET latest release version tag TODO: Replace ameyapat/microsoft-authentication-lib with $(Build.Repository.Name)
#  - task: Bash@3
#    displayName: GET latest release tag
#    inputs:
#      targetType: 'inline'
#      script: |
#        req=$(curl -sS "https://api.github.com/repos/ameyapat/microsoft-authentication-library-for-objc/releases/latest" | jq -r '.tag_name')        
#        echo "##vso[task.setvariable variable=releaseVersion]$req"
#        chksm=$(shasum -a 256 $(Build.ArtifactStagingDirectory)/MSAL.zip)
#        echo "##vso[task.setvariable variable=frameworkChecksum]chksm"
#      failOnStderr: true
#      noProfile: false
#      noRc: false

#  - task: Shellpp@0
#    displayName: Generating release archive zips
#    inputs:
#      type: 'FilePath'
#      scriptPath: 'ReleaseArchive.sh'
#      args: '$(releaseVersion) $(Build.ArtifactStagingDirectory)'

#TODO : Replace forked repo with actual MSAL repo
#  - task: GitHubRelease@1
#    displayName: Update tagged release with signed framework
#    inputs:
#      gitHubConnection: 'github.com_ameyapat'
#      repositoryName: 'ameyapat/microsoft-authentication-library-for-objc'
#      action: 'edit'
#      tag: '$(releaseVersion)'
#     addChangeLog: false

  - task: UsePythonVersion@0
    displayName: Use Python 3.x & install github3
  - bash: python3 -m pip install github3.py==1.3.0

  - task: PythonScript@0
    displayName: Update checksum and url in package.swift
    inputs:
      scriptSource: 'inline'
      script: |
        import github3
        import re
        import os
        import requests
        import base64
        from subprocess import run, PIPE

        auth_header = run(["git", "config", "http.$(Build.Repository.URI).extraheader"], text=True, check=True, stdout=PIPE).stdout.strip()
        class HTTPHardcodedHeaderAuth(requests.auth.AuthBase):
            def __call__(self, r):
                r.headers['Authorization'] = auth_header.replace("AUTHORIZATION: ", "")
                return r
        
        def update_file_contents (f) :
            if f is None:
                raise "File is not defined. Can't update file"
            f = "".join(chr(x) for x in f)
            regex = r"checksum:\s+\"[\da-fA-F]{64}\""
            subst = "checksum: {os.environ['frameworkChecksum']}"
            f = re.sub(regex, subst, f, 0, re.MULTILINE)
        
            regex = r"releases\/download\/[0-9a-zA-Z\.].+\/"
            subst = "releases/download/" + os.environ['releaseVersion'] +"/"
            f = re.sub(regex, subst, f, 0 , re.MULTILINE)
        
            print(f)
            return f
        
        at = HTTPHardcodedHeaderAuth() 
        g = github3.GitHub()
        g.session.auth = at

        repo = g.repository("ameyapat","microsoft-authentication-library-for-objc")
        swift_package_file = repo.file_contents(path="/Package.swift", ref="master")
        
        print(swift_package_file.decoded)
        #Replace existing checksum with new checksum
        #repo.update_file(path=swift_package_file.path+"/", message="Updating release package.swift with latest release data", content=update_file_contents(swift_package_file.decoded_content), sha=swift_package_file.sha, branch="master")
      failOnStderr: true